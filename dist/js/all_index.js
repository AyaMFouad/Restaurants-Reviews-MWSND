class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static get RESTAURANT_URL(){return"http://localhost:1337/restaurants"}static get REVIEWS_URL(){return"http://localhost:1337/reviews/?restaurant_id="}static openDatabase(){return navigator.serviceWorker?idb.open("restaurants-db",1,function(e){e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("rest-id","id"),e.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id",{unique:!1}),e.createObjectStore("sync-reviews",{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id",{unique:!1})}):(console.log("Browser doesn't support Service Workers"),Promise.resolve())}static fetchRestaurants(e){DBHelper.openDatabase().then(function(e){return e?e.transaction("restaurants","readwrite").objectStore("restaurants").getAll():void 0}).then(function(t){0!==t.length&&e(null,t)}),fetch(DBHelper.RESTAURANT_URL).then(function(t){200===t.status?t.json().then(function(t){DBHelper.openDatabase().then(function(e){if(e){let r=e.transaction("restaurants","readwrite"),n=r.objectStore("restaurants");return t.forEach(function(e){n.put(e)}),r.complete}}),e(null,t)}):console.log("Fetch Issue - Status Code: "+t.status)}).catch(function(e){console.log("Fetch Error: ",e)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchReviews(e,t){DBHelper.openDatabase().then(function(t){if(t){return t.transaction("reviews","readwrite").objectStore("reviews").index("restaurant_id").getAll(parseInt(e))}}).then(function(e){0!==e.length&&t(null,e)}),fetch(`${DBHelper.REVIEWS_URL}${e}`).then(e=>e.json()).then(e=>{DBHelper.openDatabase().then(function(t){if(t){let r=t.transaction("reviews","readwrite"),n=r.objectStore("reviews");return e.forEach(function(e){n.put(e)}),r.complete}}),t(null,e)}).catch(e=>t(`Request failed. Returned ${e}`,null))}static fetchTmpReviews(e,t){DBHelper.openDatabase().then(function(t){if(t){return t.transaction("sync-reviews","readonly").objectStore("sync-reviews").index("restaurant_id").getAll(parseInt(e))}}).then(function(e){0!==e.length&&t(null,e)})}static postReview(e){return DBHelper.openDatabase().then(function(t){if(t){let r=t.transaction("sync-reviews","readwrite");return r.objectStore("sync-reviews").put(e),r.complete}}).then(function(){return Promise.resolve()}).catch(function(e){return console.log(e),Promise.resolve()})}static toggleFavorite(e,t){return DBHelper.openDatabase().then(function(e){if(e){return e.transaction("restaurants","readwrite").objectStore("restaurants").index("rest-id").openCursor()}}).then(function r(n){if(e=+e,n){if(n.value.id===e){var a=n.value;a.is_favorite=t,n.update(a).onsuccess=function(){}}return n.continue().then(r)}}).then(function(){fetch(`http://localhost:1337/restaurants/${e}/?is_favorite=${t}`,{method:"PUT"}).then(e=>e.json()).catch(e=>{console.log("Error fetching is_favorite: "+e)})}).then(function(){return Promise.resolve()})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.webp`}static imageResponsiveUrlForRestaurant(e){return`/img_responsive/${e.id}-320.webp 320w,\n        /img_responsive/${e.id}-480.webp 480w,\n        /img_responsive/${e.id}-640.webp 640w,\n        /img_responsive/${e.id}-800.webp 800w`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}let restaurants,neighborhoods,cuisines;var map,markers=[];let observer=new IntersectionObserver(e=>{for(const t of e)t.intersecionRation>=.9&&DBHelper.fetchRestaurants((e,t)=>{e?console.error(e):fillRestaurantHTML(t)})},{threshold:[.9]});observer.observe(document.getElementById("restaurants-list"));const photographAlts={1:"Sereval groups of people having quality time at a restaurant.",2:"A lovely margeritta pizza",3:"An empty restaurant setting which has heaters",4:"A corner shot of the outside of the restaurat.",5:"A crowded restaurant and staff serving food from behind the bar.",6:"Restaurant with wooden tables, charis, and a US flag as a wall decoration",7:"a dog watching from the outside of a crowded burger shop, accompanied by two men.",8:"Close up of the dutch restaurant logo beside a flowering tree",9:"Black and white picture of people eating at an asian restaurat.",10:"Empty restaurant's white chairs, walls and ceilings."};document.addEventListener("DOMContentLoaded",e=>{fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),window.initMap=(()=>{document.getElementById("map"),self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),callMap=document.getElementById("mapToggle").addEventListener("click",function(e){"block"===document.getElementById("map-container").style.display?(document.getElementById("map-container").style.display="none",window.initMap()):document.getElementById("map-container").style.display="block"}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),r=e.selectedIndex,n=t.selectedIndex,a=e[r].value,s=t[n].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(a,s,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li");t.tabIndex="0";const r=document.createElement("img");r.className="restaurant-img",r.src=DBHelper.imageUrlForRestaurant(e),r.srcset=DBHelper.imageResponsiveUrlForRestaurant(e),r.alt=photographAlts[e.id],t.append(r);const n=document.createElement("h2");n.innerHTML=e.name,t.append(n);const a=document.createElement("p");a.innerHTML=e.neighborhood,t.append(a);const s=document.createElement("p");s.innerHTML=e.address,t.append(s);const o=document.createElement("div");o.setAttribute("class","wrapper"),t.append(o);const i=document.createElement("a");i.innerHTML="View Details",i.href=DBHelper.urlForRestaurant(e),o.append(i);const l=document.createElement("i"),c="true"==e.is_favorite?"fas":"far";return l.setAttribute("id",`rest${e.id}`),l.setAttribute("class",`${c} fa-heart fa-3x`),l.setAttribute("tabindex","0"),l.setAttribute("role","button"),"true"==e.is_favorite?l.setAttribute("aria-label",`Unmark ${e.name} as favorite`):l.setAttribute("aria-label",`Mark ${e.name} as favorite`),l.addEventListener("click",()=>{const t=l.getAttribute("id");toggleFav(t,e.name)}),l.addEventListener("keydown",t=>{if(13===t.keyCode){const t=l.getAttribute("id");toggleFav(t,e.name)}}),o.append(l),t}),toggleFav=((e,t)=>{const r=document.getElementById(e),n=r.classList.contains("far");r.classList.toggle("far"),r.classList.toggle("fas"),n?r.setAttribute("aria-label",`Mark ${t} as favorite`):r.setAttribute("aria-label",`Unmark ${t} as favorite`),DBHelper.toggleFavorite(e.slice(4),n).then(()=>{setTimeout(function(){updateRestaurants()},200)})}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})}),navigator.serviceWorker&&navigator.serviceWorker.register("sw.js").then(()=>console.log("Passed Test")),registerServiceWorker=(()=>{navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").catch(function(){console.log("Something went wrong. ServiceWorker not registered")})}),registerServiceWorker();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
