class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){DBHelper.fetchRestaurantsFromIDB((t,r)=>{t&&DBHelper.fetchRestaurantsFromNetwork((t,r)=>{r&&(DBHelper.saveRestaurantstoIDB(r),e(null,r)),t&&e(t,null)}),r&&e(null,r)})}static fetchReviews(e){DBHelper.fetchReviewsFromIDB((t,r)=>{t&&DBHelper.fetchReviewsFromNetwork((t,r)=>{r&&r.length&&(DBHelper.saveReviewsIntoIDB(r),e(null,r)),t&&e(t,null)}),r&&e(null,r)})}static fetchReviewsFromIDB(e){return DBHelper.openIDB().then(t=>{if(!t)return;return t.transaction("reviews").objectStore("reviews").getAll().then(t=>{if(t.length)e(null,t);else{e("There is no reviews in IDB",null)}})})}static saveReviewsIntoIDB(e){return DBHelper.openIDB().then(t=>{if(!t)return;const r=t.transaction("reviews","readwrite"),n=r.objectStore("reviews");return e.forEach(e=>{n.put(e)}),r.complete})}static saveSyncReviewsIntoIDB(e){return DBHelper.openIDB().then(t=>{if(!t)return;const r=t.transaction("sync-reviews","readwrite");return r.objectStore("sync-reviews").put(e),r.complete})}static getSyncReviewsFromIDB(){return DBHelper.openIDB().then(e=>{if(!e)return;return e.transaction("sync-reviews").objectStore("sync-reviews").getAll()})}static fetchReviewsFromNetwork(e){return fetch("http://localhost:1337/reviews").then(e=>e.json()).then(t=>{t&&e(null,t)}).catch(t=>{e("Request failed. Returned status of 404",null)})}static saveRestaurantstoIDB(e){return DBHelper.openDatabase().then(function(t){if(!t)return;let r=t.transaction("restaurants","readwrite").objectStore("restaurants");e.forEach(function(e){r.put(e)})})}static fetchRestaurantsFromNetwork(e){return fetch(DBHelper.DATABASE_URL).then(function(t){200===t.status?t.json().then(function(t){e(null,t)}):console.log("Fetch Issue - Status Code: "+t.status)}).catch(function(e){console.log("Fetch Error: ",e)})}static fetchRestaurantsFromIDB(e){return DBHelper.openDatabase().then(function(e){if(e)return e.transaction("restaurants","readwrite").objectStore("restaurants").getAll()}).then(function(t){0!==t.length&&e(null,t)})}static openDatabase(){return navigator.serviceWorker?idb.open("restaurants-db",2,e=>{switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"});case 1:e.createObjectStore("reviews",{keyPath:"id"});case 2:e.createObjectStore("sync-reviews",{keyPath:"id"});case 3:e.createObjectStore("sync-favorites",{keyPath:"id"})}}):Promise.resolve()}static createPostReview(e){return fetch("http://localhost:1337/reviews/",{method:"post",body:JSON.stringify(e)}).then(e=>e.json()).then(e=>{DBHelper.saveReviewsIntoIDB([e])}).catch(e=>{console.log("something went wrong",e)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,s)=>{if(n)r(n,null);else{let n=s;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.webp`}static imageResponsiveUrlForRestaurant(e){return`/img_responsive/${e.id}-320.webp 320w,\n        /img_responsive/${e.id}-480.webp 480w,\n        /img_responsive/${e.id}-640.webp 640w,\n        /img_responsive/${e.id}-800.webp 800w`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}let restaurants,neighborhoods,cuisines;var map,markers=[];let observer=new IntersectionObserver(e=>{for(const t of e)t.intersecionRation>=.9&&DBHelper.fetchRestaurants((e,t)=>{e?console.error(e):fillRestaurantHTML(t)})},{threshold:[.9]});observer.observe(document.getElementById("restaurants-list"));const photographAlts={1:"Sereval groups of people having quality time at a restaurant.",2:"A lovely margeritta pizza",3:"An empty restaurant setting which has heaters",4:"A corner shot of the outside of the restaurat.",5:"A crowded restaurant and staff serving food from behind the bar.",6:"Restaurant with wooden tables, charis, and a US flag as a wall decoration",7:"a dog watching from the outside of a crowded burger shop, accompanied by two men.",8:"Close up of the dutch restaurant logo beside a flowering tree",9:"Black and white picture of people eating at an asian restaurat.",10:"Empty restaurant's white chairs, walls and ceilings."};document.addEventListener("DOMContentLoaded",e=>{fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),window.initMap=(()=>{document.getElementById("map"),self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),callMap=document.getElementById("mapToggle").addEventListener("click",function(e){"block"===document.getElementById("map-container").style.display?(document.getElementById("map-container").style.display="none",window.initMap()):document.getElementById("map-container").style.display="block"}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),r=e.selectedIndex,n=t.selectedIndex,s=e[r].value,a=t[n].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(s,a,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li");t.tabIndex="0";const r=document.createElement("img");r.className="restaurant-img",r.src=DBHelper.imageUrlForRestaurant(e),r.srcset=DBHelper.imageResponsiveUrlForRestaurant(e),r.alt=photographAlts[e.id],t.append(r);const n=document.createElement("h2");n.innerHTML=e.name,t.append(n);const s=document.createElement("p");s.innerHTML=e.neighborhood,t.append(s);const a=document.createElement("p");a.innerHTML=e.address,t.append(a);const o=document.createElement("a");return o.innerHTML="View Details",o.href=DBHelper.urlForRestaurant(e),t.append(o),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})}),navigator.serviceWorker&&navigator.serviceWorker.register("sw.js").then(()=>console.log("Passed Test")),registerServiceWorker=(()=>{navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").catch(function(){console.log("Something went wrong. ServiceWorker not registered")})}),registerServiceWorker();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
