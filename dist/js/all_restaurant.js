class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){DBHelper.fetchRestaurantsFromIDB((t,r)=>{t&&DBHelper.fetchRestaurantsFromNetwork((t,r)=>{r&&(DBHelper.saveRestaurantstoIDB(r),e(null,r)),t&&e(t,null)}),r&&e(null,r)})}static fetchReviews(e){DBHelper.fetchReviewsFromIDB((t,r)=>{t&&DBHelper.fetchReviewsFromNetwork((t,r)=>{r&&r.length&&(DBHelper.saveReviewsIntoIDB(r),e(null,r)),t&&e(t,null)}),r&&e(null,r)})}static fetchReviewsFromIDB(e){return DBHelper.openIDB().then(t=>{if(!t)return;return t.transaction("reviews").objectStore("reviews").getAll().then(t=>{if(t.length)e(null,t);else{e("There is no reviews in IDB",null)}})})}static saveReviewsIntoIDB(e){return DBHelper.openIDB().then(t=>{if(!t)return;const r=t.transaction("reviews","readwrite"),n=r.objectStore("reviews");return e.forEach(e=>{n.put(e)}),r.complete})}static saveSyncReviewsIntoIDB(e){return DBHelper.openIDB().then(t=>{if(!t)return;const r=t.transaction("sync-reviews","readwrite");return r.objectStore("sync-reviews").put(e),r.complete})}static getSyncReviewsFromIDB(){return DBHelper.openIDB().then(e=>{if(!e)return;return e.transaction("sync-reviews").objectStore("sync-reviews").getAll()})}static fetchReviewsFromNetwork(e){return fetch("http://localhost:1337/reviews").then(e=>e.json()).then(t=>{t&&e(null,t)}).catch(t=>{e("Request failed. Returned status of 404",null)})}static saveRestaurantstoIDB(e){return DBHelper.openDatabase().then(function(t){if(!t)return;let r=t.transaction("restaurants","readwrite").objectStore("restaurants");e.forEach(function(e){r.put(e)})})}static fetchRestaurantsFromNetwork(e){return fetch(DBHelper.DATABASE_URL).then(function(t){200===t.status?t.json().then(function(t){e(null,t)}):console.log("Fetch Issue - Status Code: "+t.status)}).catch(function(e){console.log("Fetch Error: ",e)})}static fetchRestaurantsFromIDB(e){return DBHelper.openDatabase().then(function(e){if(e)return e.transaction("restaurants","readwrite").objectStore("restaurants").getAll()}).then(function(t){0!==t.length&&e(null,t)})}static openDatabase(){return navigator.serviceWorker?idb.open("restaurants-db",2,e=>{switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"});case 1:e.createObjectStore("reviews",{keyPath:"id"});case 2:e.createObjectStore("sync-reviews",{keyPath:"id"});case 3:e.createObjectStore("sync-favorites",{keyPath:"id"})}}):Promise.resolve()}static createPostReview(e){return fetch("http://localhost:1337/reviews/",{method:"post",body:JSON.stringify(e)}).then(e=>e.json()).then(e=>{DBHelper.saveReviewsIntoIDB([e])}).catch(e=>{console.log("something went wrong",e)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.webp`}static imageResponsiveUrlForRestaurant(e){return`/img_responsive/${e.id}-320.webp 320w,\n        /img_responsive/${e.id}-480.webp 480w,\n        /img_responsive/${e.id}-640.webp 640w,\n        /img_responsive/${e.id}-800.webp 800w`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}let restaurant,reviews;var map;document.addEventListener("DOMContentLoaded",e=>{fetchRestaurantFromURL((e,t)=>{t&&(self.restaurant=t,fillBreadcrumb(),fetchReviews(),addMarkerToMap(t),updateIconData())})}),updateIconData=((e=self.restaurant)=>{const t=document.querySelector("#star-icon"),r=DBHelper.urlForToggleFavoriteLink(e);t.setAttribute("data-link",r),t.setAttribute("data-id",e.id),"true"==e.is_favorite?(t.classList.add("open"),t.setAttribute("title","unfavorite restaurant!")):(t.classList.remove("open"),t.setAttribute("title","favorite restaurant!"))});const photographAlts={1:"Sereval groups of people having quality time at a restaurant.",2:"A lovely margeritta pizza",3:"An empty restaurant setting which has heaters",4:"A corner shot of the outside of the restaurat.",5:"A crowded restaurant and staff serving food from behind the bar.",6:"Restaurant with wooden tables, charis, and a US flag as a wall decoration",7:"a dog watching from the outside of a crowded burger shop, accompanied by two men.",8:"Close up of the dutch restaurant logo beside a flowering tree",9:"Black and white picture of people eating at an asian restaurat.",10:"Empty restaurant's white chairs, walls and ceilings."};window.initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})}),callMap=document.getElementById("mapToggle").addEventListener("click",function(e){"block"===document.getElementById("map-container").style.display?(document.getElementById("map-container").style.display="none",window.initMap()):document.getElementById("map-container").style.display="block"}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,r)=>{self.restaurant=r,r?(fillRestaurantHTML(),e(null,r)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img",t.src=DBHelper.imageUrlForRestaurant(e),t.srcset=DBHelper.imageResponsiveUrlForRestaurant(e),t.alt=photographAlts[e.id],document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");t.innerHTML="";for(let r in e){const n=document.createElement("tr"),a=document.createElement("td");a.innerHTML=r,n.appendChild(a);const s=document.createElement("td");s.innerHTML=e[r],n.appendChild(s),t.appendChild(n)}}),fillReviewsHTML=((e=self.restaurant.reviews)=>{const t=document.getElementById("reviews-container");t.innerHTML='<ul id="reviews-list"></ul>';const r=document.createElement("h2");if(r.innerHTML="Reviews",r.tabIndex="0",t.appendChild(r),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const n=document.getElementById("reviews-list");e.forEach(e=>{n.appendChild(createReviewHTML(e))}),t.appendChild(n)}),createReviewHTML=(e=>{const t=document.createElement("li");t.tabIndex="0";const r=document.createElement("h5");r.innerHTML=e.date,t.appendChild(r);const n=document.createElement("h1");n.innerHTML=e.name,t.appendChild(n);const a=document.createElement("i");a.innerHTML=`Rating: ${e.rating}`,t.appendChild(a);const s=document.createElement("p");return s.innerHTML=e.comments,t.appendChild(s),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),r=t.querySelectorAll("li");for(element of r)element.removeAttribute("aria-current");const n=document.createElement("li");n.setAttribute("aria-current","page"),2!==t.childElementCount&&(n.innerHTML=e.name,t.appendChild(n))}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const r=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return r?r[2]?decodeURIComponent(r[2].replace(/\+/g," ")):"":null}),navigator.serviceWorker&&navigator.serviceWorker.register("sw.js").then(()=>console.log("Passed Test"));const star=document.querySelector("#star-icon");star.addEventListener("click",function(e){let t=star.dataset.link,r=star.dataset.id;"serviceWorker"in navigator&&"SyncManager"in window?navigator.serviceWorker.ready.then(e=>{self.restaurant.is_favorite="true"==self.restaurant.is_favorite?"false":"true",updateIconData(),DBHelper.saveSyncFavoritesIntoIDB({url:t,id:r}).then(()=>e.sync.register("sync-add-favorites")).then(()=>{DBHelper.updateRestaurantIsFavoriteInIDB(r)}).catch(e=>{console.log("error in syncing the favorite link",e)})}):DBHelper.addRestaurantToFavorite(t).then(()=>{DBHelper.updateRestaurantIsFavoriteInIDB(r),self.restaurant.is_favorite="false"==self.restaurant.is_favorite?"true":"false",updateIconData()})}),registerServiceWorker=(()=>{navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").catch(function(){console.log("Something went wrong. ServiceWorker not registered")})}),registerServiceWorker();var vue=new Vue({el:"#app",data:{formOpen:!1,review:{name:"",rating:"",comments:""}},methods:{resetForm:function(){this.review={name:"",rating:"",comments:""}},cancel:function(){this.formOpen=!1,this.resetForm()}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
