class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static get RESTAURANT_URL(){return"http://localhost:1337/restaurants"}static get REVIEWS_URL(){return"http://localhost:1337/reviews/?restaurant_id="}static openDatabase(){return navigator.serviceWorker?idb.open("restaurants-db",1,function(e){e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("rest-id","id"),e.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id",{unique:!1}),e.createObjectStore("sync-reviews",{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id",{unique:!1})}):(console.log("Browser doesn't support Service Workers"),Promise.resolve())}static fetchRestaurants(e){DBHelper.openDatabase().then(function(e){return e?e.transaction("restaurants","readwrite").objectStore("restaurants").getAll():void 0}).then(function(t){0!==t.length&&e(null,t)}),fetch(DBHelper.RESTAURANT_URL).then(function(t){200===t.status?t.json().then(function(t){DBHelper.openDatabase().then(function(e){if(e){let n=e.transaction("restaurants","readwrite"),r=n.objectStore("restaurants");return t.forEach(function(e){r.put(e)}),n.complete}}),e(null,t)}):console.log("Fetch Issue - Status Code: "+t.status)}).catch(function(e){console.log("Fetch Error: ",e)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((r,a)=>{if(r)n(r,null);else{let r=a;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchReviews(e,t){DBHelper.openDatabase().then(function(t){if(t){return t.transaction("reviews","readwrite").objectStore("reviews").index("restaurant_id").getAll(parseInt(e))}}).then(function(e){0!==e.length&&t(null,e)}),fetch(`${DBHelper.REVIEWS_URL}${e}`).then(e=>e.json()).then(e=>{DBHelper.openDatabase().then(function(t){if(t){let n=t.transaction("reviews","readwrite"),r=n.objectStore("reviews");return e.forEach(function(e){r.put(e)}),n.complete}}),t(null,e)}).catch(e=>t(`Request failed. Returned ${e}`,null))}static fetchOfflineReviews(e,t){DBHelper.openDatabase().then(function(t){if(t){return t.transaction("sync-reviews","readonly").objectStore("sync-reviews").index("restaurant_id").getAll(parseInt(e))}}).then(function(e){0!==e.length&&t(null,e)})}static postReview(e){return DBHelper.openDatabase().then(function(t){if(t){let n=t.transaction("sync-reviews","readwrite");return n.objectStore("sync-reviews").put(e),n.complete}}).then(function(){return Promise.resolve()}).catch(function(e){return console.log(e),Promise.resolve()})}static toggleFavorite(e,t){return DBHelper.openDatabase().then(function(e){if(e){return e.transaction("restaurants","readwrite").objectStore("restaurants").index("rest-id").openCursor()}}).then(function n(r){if(e=+e,r){if(r.value.id===e){var a=r.value;a.is_favorite=t,r.update(a).onsuccess=function(){}}return r.continue().then(n)}}).then(function(){fetch(`http://localhost:1337/restaurants/${e}/?is_favorite=${t}`,{method:"PUT"}).then(e=>e.json()).catch(e=>{console.log("Error fetching is_favorite: "+e)})}).then(function(){return Promise.resolve()})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.webp`}static imageResponsiveUrlForRestaurant(e){return`/img_responsive/${e.id}-320.webp 320w,\n        /img_responsive/${e.id}-480.webp 480w,\n        /img_responsive/${e.id}-640.webp 640w,\n        /img_responsive/${e.id}-800.webp 800w`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}let restaurant;var map;const photographAlts={1:"Sereval groups of people having quality time at a restaurant.",2:"A lovely margeritta pizza",3:"An empty restaurant setting which has heaters",4:"A corner shot of the outside of the restaurat.",5:"A crowded restaurant and staff serving food from behind the bar.",6:"Restaurant with wooden tables, charis, and a US flag as a wall decoration",7:"a dog watching from the outside of a crowded burger shop, accompanied by two men.",8:"Close up of the dutch restaurant logo beside a flowering tree",9:"Black and white picture of people eating at an asian restaurat.",10:"Empty restaurant's white chairs, walls and ceilings."};window.initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})}),document.getElementById("mapToggle").addEventListener("click",function(e){"block"===document.getElementById("map-container").style.display?(document.getElementById("map-container").style.display="none",window.initMap()):document.getElementById("map-container").style.display="block"}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),favToggle=(e=>{const t=document.getElementById("isFavorite"),n=t.classList.contains("far");t.classList.toggle("far"),t.classList.toggle("fas"),DBHelper.favToggle(e,n)}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name;const t=document.getElementById("isFavorite"),n="true"==e.is_favorite?"fas":"far";t.classList.remove("far"),t.classList.add(`${n}`),"true"==e.is_favorite?t.setAttribute("aria-label",`Unmark ${e.name} as favorite`):t.setAttribute("aria-label",`Mark ${e.name} as favorite`),document.getElementById("restaurant-address").innerHTML=e.address;const r=document.getElementById("restaurant-img");r.className="restaurant-img",r.src=DBHelper.imageUrlForRestaurant(e),r.srcset=DBHelper.imageResponsiveUrlForRestaurant(e),r.alt=photographAlts[e.id],document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");t.innerHTML="";for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,r.appendChild(a);const o=document.createElement("td");o.innerHTML=e[n],r.appendChild(o),t.appendChild(r)}}),fillReviewsHTML=((e=self.restaurant.id)=>{DBHelper.fetchReviews(e,(e,t)=>{if(e)console.log(e);else{const e=document.getElementById("reviews-container");e.innerHTML='<ul id="reviews-list"></ul>';const n=document.createElement("h2");if(n.innerHTML="Reviews",n.tabIndex="0",e.appendChild(n),!t){const t=document.createElement("p");return t.innerHTML="No reviews yet!",void e.appendChild(t)}{const n=document.getElementById("reviews-list");t.forEach(e=>{n.appendChild(createReviewHTML(e))}),e.appendChild(n),offlineReviewsHTML()}}})}),window.addEventListener("online",function(e){navigator.serviceWorker.ready.then(function(e){e.sync.register("reqReviewSync")})},!1),offlineReviewsHTML=((e=self.restaurant.id)=>{DBHelper.fetchOfflineReviews(e,(e,t)=>{if(e)console.log(e);else{const e=document.getElementById("reviews-list");0===document.getElementsByClassName("tmp").length&&t.forEach(t=>{e.appendChild(createOffReviewHTML(t))})}})}),createReviewHTML=(e=>{const t=document.createElement("li");t.tabIndex="0";const n=document.createElement("h5"),r=new Date(e.createdAt);n.innerHTML=r.toDateString(),t.appendChild(n);const a=document.createElement("h1");a.innerHTML=e.name,t.appendChild(a);const o=document.createElement("i");o.innerHTML=`Rating: ${e.rating}`,o.style.backgroundColor=5===e.rating?"green":e.rating>2?"orange":"red",t.appendChild(o);const i=document.createElement("p");i.innerHTML=e.comments,t.appendChild(i);const s=`${e.name} said ${e.comments} and rated the restaurant ${e.rating} out of 5`;return t.setAttribute("aria-label",s),t}),createOffReviewHTML=(e=>{const t=document.createElement("li");t.setAttribute("class","tmp");const n=document.createElement("div");n.setAttribute("class","review-header"),t.appendChild(n);const r=document.createElement("h1");r.setAttribute("class","reviewName"),r.innerHTML=e.name,n.appendChild(r);const a=document.createElement("h5");a.setAttribute("class","reviewDate");a.innerHTML=new Date(e.createdAt).toLocaleDateString("en-US",{weekday:"short",year:"numeric",month:"long",day:"numeric"}),n.appendChild(a);const o=document.createElement("i");o.innerHTML=`Rating: ${e.rating}`,o.setAttribute("class","reviewRating"),o.style.backgroundColor=5===e.rating?"green":e.rating>2?"orange":"red",t.appendChild(o);const i=document.createElement("p");return i.innerHTML=e.comments,i.setAttribute("class","reviewComment"),t.appendChild(i),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=t.querySelectorAll("li");for(element of n)element.removeAttribute("aria-current");const r=document.createElement("li");r.setAttribute("aria-current","page"),2!==t.childElementCount&&(r.innerHTML=e.name,t.appendChild(r))}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null});const fav=document.getElementById("isFavorite");fav.addEventListener("click",()=>{favToggle(self.restaurant.id)}),fav.addEventListener("keydown",e=>{13===e.keyCode&&favToggle(self.restaurant.id)}),navigator.serviceWorker&&navigator.serviceWorker.register("sw.js").then(()=>console.log("Passed Test"));var _this=this,vue=new Vue({el:"#app",data:{formOpen:!1,review:{name:"",rating:"",comments:""}},methods:{resetForm:function(){this.review={name:"",rating:"",comments:""}},cancel:function(){this.formOpen=!1,this.resetForm()}}});addReview=(()=>{const e={restaurant_id:self.restaurant.id,name:document.getElementById("name").value,createdAt:(new Date).getTime(),updatedAt:(new Date).getTime(),rating:+document.getElementById("rating").value,comments:document.getElementById("comments").value},t=document.getElementById("reviews-list");t.insertBefore(createReviewHTML(e),t.childNodes[0]),navigator.onLine||alert("You are currently offline. Your review will be posted once you are online again. Thank you for reviewing!"),DBHelper.postReview(e).then(function(){navigator.serviceWorker.ready.then(function(e){e.sync.register("reqReviewSync"),location.reload()})}).then(function(){fillReviewsHTML()}).then(function(){offlineReviewsHTML()}).catch(function(e){console.error(e)})}),document.getElementById("review-form").addEventListener("submit",function(e){e.preventDefault(),addReview(),13===e.keyCode&&removeTabfocusFromForm()}),document.getElementById("add-review").addEventListener("keyup",function(e){e.preventDefault(),13===e.keyCode&&(document.getElementById("name").tabIndex="0",document.getElementById("rating").tabIndex="0",document.getElementById("comments").tabIndex="0",document.getElementById("submit").tabIndex="0",document.getElementById("cancel").tabIndex="0",document.getElementById("add-review").click())}),document.getElementById("cancel").addEventListener("keyup",function(e){e.preventDefault(),13===e.keyCode&&removeTabfocusFromForm()}),removeTabfocusFromForm=(()=>{window.onload=(()=>{const e=document.querySelector("#add-review");formDesc=e.querySelectorAll("*"),formDesc.forEach(e=>{e.setAttribute("tabindex","-1")},_this)})}),registerServiceWorker=(()=>{navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").catch(function(){console.log("Something went wrong. ServiceWorker not registered")})}),registerServiceWorker();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
