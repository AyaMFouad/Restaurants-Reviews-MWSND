class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static openDatabase(){return navigator.serviceWorker?idb.open("restaurant-db",1,function(e){e.createObjectStore("restaurants",{keyPath:"id"})}):Promise.resolve()}static fetchRestaurants(e){DBHelper.openDatabase().then(function(e){return e?e.transaction("restaurants","readwrite").objectStore("restaurants").getAll():void 0}).then(function(t){0!==t.length&&e(null,t)}),fetch(DBHelper.DATABASE_URL).then(function(t){200===t.status?t.json().then(function(t){DBHelper.openDatabase().then(function(e){if(e){let n=e.transaction("restaurants","readwrite").objectStore("restaurants");t.forEach(function(e){n.put(e)})}}),e(null,t)}):console.log("Fetch Issue - Status Code: "+t.status)}).catch(function(e){console.log("Fetch Error: ",e)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((r,a)=>{if(r)n(r,null);else{let r=a;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.webp`}static imageResponsiveUrlForRestaurant(e){return`/img_responsive/${e.id}-320.webp 320w,\n        /img_responsive/${e.id}-480.webp 480w,\n        /img_responsive/${e.id}-640.webp 640w,\n        /img_responsive/${e.id}-800.webp 800w`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}let restaurant;var map;const photographAlts={1:"Sereval groups of people having quality time at a restaurant.",2:"A lovely margeritta pizza",3:"An empty restaurant setting which has heaters",4:"A corner shot of the outside of the restaurat.",5:"A crowded restaurant and staff serving food from behind the bar.",6:"Restaurant with wooden tables, charis, and a US flag as a wall decoration",7:"a dog watching from the outside of a crowded burger shop, accompanied by two men.",8:"Close up of the dutch restaurant logo beside a flowering tree",9:"Black and white picture of people eating at an asian restaurat.",10:"Empty restaurant's white chairs, walls and ceilings."};window.initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})}),callMap=document.getElementById("mapToggle").addEventListener("click",function(e){"block"===document.getElementById("map-container").style.display?(document.getElementById("map-container").style.display="none",window.initMap()):document.getElementById("map-container").style.display="block"}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img",t.src=DBHelper.imageUrlForRestaurant(e),t.srcset=DBHelper.imageResponsiveUrlForRestaurant(e),t.alt=photographAlts[e.id],document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");t.innerHTML="";for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,r.appendChild(a);const s=document.createElement("td");s.innerHTML=e[n],r.appendChild(s),t.appendChild(r)}}),fillReviewsHTML=((e=self.restaurant.reviews)=>{const t=document.getElementById("reviews-container");t.innerHTML='<ul id="reviews-list"></ul>';const n=document.createElement("h2");if(n.innerHTML="Reviews",n.tabIndex="0",t.appendChild(n),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const r=document.getElementById("reviews-list");e.forEach(e=>{r.appendChild(createReviewHTML(e))}),t.appendChild(r)}),createReviewHTML=(e=>{const t=document.createElement("li");t.tabIndex="0";const n=document.createElement("h5");n.innerHTML=e.date,t.appendChild(n);const r=document.createElement("h1");r.innerHTML=e.name,t.appendChild(r);const a=document.createElement("i");a.innerHTML=`Rating: ${e.rating}`,t.appendChild(a);const s=document.createElement("p");return s.innerHTML=e.comments,t.appendChild(s),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=t.querySelectorAll("li");for(element of n)element.removeAttribute("aria-current");const r=document.createElement("li");r.setAttribute("aria-current","page"),2!==t.childElementCount&&(r.innerHTML=e.name,t.appendChild(r))}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}),navigator.serviceWorker&&navigator.serviceWorker.register("sw.js").then(()=>console.log("Passed Test")),registerServiceWorker=(()=>{navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").catch(function(){console.log("Something went wrong. ServiceWorker not registered")})}),registerServiceWorker();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRiaGVscGVyLmpzIiwicmVzdGF1cmFudF9pbmZvLmpzIiwicmVnaXN0ZXJTZXJ2aWNlV29ya2VyLmpzIl0sIm5hbWVzIjpbIkRCSGVscGVyIiwiREFUQUJBU0VfVVJMIiwiW29iamVjdCBPYmplY3RdIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsImlkYiIsIm9wZW4iLCJ1cGdyYWRlRGIiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNhbGxiYWNrIiwib3BlbkRhdGFiYXNlIiwidGhlbiIsImRiIiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZSIsImdldEFsbCIsInJlc3RhdXJhbnRzIiwibGVuZ3RoIiwiZmV0Y2giLCJyZXNwb25zZSIsInN0YXR1cyIsImpzb24iLCJzdG9yZSIsImZvckVhY2giLCJyZXN0YXVyYW50IiwicHV0IiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwiaWQiLCJmZXRjaFJlc3RhdXJhbnRzIiwiZXJyb3IiLCJmaW5kIiwiciIsImN1aXNpbmUiLCJyZXN1bHRzIiwiZmlsdGVyIiwiY3Vpc2luZV90eXBlIiwibmVpZ2hib3Job29kIiwibmVpZ2hib3Job29kcyIsIm1hcCIsInYiLCJpIiwidW5pcXVlTmVpZ2hib3Job29kcyIsImluZGV4T2YiLCJjdWlzaW5lcyIsInVuaXF1ZUN1aXNpbmVzIiwicGhvdG9ncmFwaCIsImdvb2dsZSIsIm1hcHMiLCJNYXJrZXIiLCJwb3NpdGlvbiIsImxhdGxuZyIsInRpdGxlIiwibmFtZSIsInVybCIsInVybEZvclJlc3RhdXJhbnQiLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJEUk9QIiwicGhvdG9ncmFwaEFsdHMiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMCIsIndpbmRvdyIsImluaXRNYXAiLCJmZXRjaFJlc3RhdXJhbnRGcm9tVVJMIiwic2VsZiIsIk1hcCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ6b29tIiwiY2VudGVyIiwic2Nyb2xsd2hlZWwiLCJmaWxsQnJlYWRjcnVtYiIsIm1hcE1hcmtlckZvclJlc3RhdXJhbnQiLCJjYWxsTWFwIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwic3R5bGUiLCJkaXNwbGF5IiwiZ2V0UGFyYW1ldGVyQnlOYW1lIiwiZmV0Y2hSZXN0YXVyYW50QnlJZCIsImZpbGxSZXN0YXVyYW50SFRNTCIsImlubmVySFRNTCIsImFkZHJlc3MiLCJpbWFnZSIsImNsYXNzTmFtZSIsInNyYyIsImltYWdlVXJsRm9yUmVzdGF1cmFudCIsInNyY3NldCIsImltYWdlUmVzcG9uc2l2ZVVybEZvclJlc3RhdXJhbnQiLCJhbHQiLCJvcGVyYXRpbmdfaG91cnMiLCJmaWxsUmVzdGF1cmFudEhvdXJzSFRNTCIsImZpbGxSZXZpZXdzSFRNTCIsIm9wZXJhdGluZ0hvdXJzIiwiaG91cnMiLCJrZXkiLCJyb3ciLCJjcmVhdGVFbGVtZW50IiwiZGF5IiwiYXBwZW5kQ2hpbGQiLCJ0aW1lIiwicmV2aWV3cyIsImNvbnRhaW5lciIsInRhYkluZGV4Iiwibm9SZXZpZXdzIiwidWwiLCJyZXZpZXciLCJjcmVhdGVSZXZpZXdIVE1MIiwibGkiLCJkYXRlIiwicmF0aW5nIiwiY29tbWVudHMiLCJicmVhZGNydW1iIiwiYnJlYWRjcnVtYkVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImVsZW1lbnQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJjaGlsZEVsZW1lbnRDb3VudCIsImxvY2F0aW9uIiwiaHJlZiIsInJlcGxhY2UiLCJSZWdFeHAiLCJleGVjIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVnaXN0ZXIiLCJyZWdpc3RlclNlcnZpY2VXb3JrZXIiXSwibWFwcGluZ3MiOiJNQU1NQSxTQU1KQywwQkFFRSxNQUFRLG9DQU9WQyxzQkFFRSxPQUFLQyxVQUFVQyxjQUtSQyxJQUFJQyxLQUFLLGdCQUFpQixFQUFHLFNBQVVDLEdBQ2hDQSxFQUFVQyxrQkFB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QixLQUMxQm9FLEVBQVdiLFlBQVlTLE1BTXpCOUIsbUJBQXFCLEVBQUNsQyxFQUFNQyxLQUNyQkEsSUFDSEEsRUFBTWdCLE9BQU8wRCxTQUFTQyxNQUN4QjVFLEVBQU9BLEVBQUs2RSxRQUFRLFVBQVcsUUFDL0IsTUFDRWhHLEVBRFksSUFBSWlHLGNBQWM5RSxzQkFDZCtFLEtBQUs5RSxHQUN2QixPQUFLcEIsRUFFQUEsRUFBUSxHQUVObUcsbUJBQW1CbkcsRUFBUSxHQUFHZ0csUUFBUSxNQUFPLE1BRDNDLEdBRkEsT0FNUHBJLFVBQVVDLGVBQ1pELFVBQVVDLGNBQWN1SSxTQUFTLFNBQzlCN0gsS0FBSyxJQUFNZSxRQUFRQyxJQUFJLGdCQy9NNUI4RyxzQkFBd0IsTUFFZnpJLFVBQVVDLGVBRWZELFVBQVVDLGNBQWN1SSxTQUFTLFVBQVU1RyxNQUFNLFdBQy9DRixRQUFRQyxJQUFJLDBEQUloQjhHIiwiZmlsZSI6ImFsbF9yZXN0YXVyYW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoganNoaW50IGVzdmVyc2lvbjogNiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDb21tb24gZGF0YWJhc2UgaGVscGVyIGZ1bmN0aW9ucy5cclxuICovXHJcbmNsYXNzIERCSGVscGVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogRGF0YWJhc2UgVVJMLlxyXG4gICAqIENoYW5nZSB0aGlzIHRvIHJlc3RhdXJhbnRzLmpzb24gZmlsZSBsb2NhdGlvbiBvbiB5b3VyIHNlcnZlci5cclxuICAgKi9cclxuICBzdGF0aWMgZ2V0IERBVEFCQVNFX1VSTCgpIHtcclxuICAgIGNvbnN0IHBvcnQgPSAxMzM3O1xyXG4gICAgcmV0dXJuIGBodHRwOi8vbG9jYWxob3N0OiR7cG9ydH0vcmVzdGF1cmFudHNgO1xyXG4gIH1cclxuXHJcblxyXG4gICAvLyBJREIgY3JlYXRpb25cclxuXHJcblxyXG4gIHN0YXRpYyBvcGVuRGF0YWJhc2UgKCkge1xyXG5cclxuICAgIGlmICghbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIpIHtcclxuICAgICAgLy9jb25zb2xlLmxvZyhgU2VydmljZSBXb3JrZXJzIGlzIG5vdCBzdXBwb3J0ZWQgYnkgYnJvd3NlcnNgKTtcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpZGIub3BlbigncmVzdGF1cmFudC1kYicsIDEsIGZ1bmN0aW9uICh1cGdyYWRlRGIpIHtcclxuICAgICAgdmFyIHN0b3JlID0gdXBncmFkZURiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycsIHtcclxuICAgICAgICBrZXlQYXRoOiAnaWQnLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYWxsIHJlc3RhdXJhbnRzLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRzKGNhbGxiYWNrKSB7XHJcblxyXG4gICAgLy8gZ2V0IHJlc3RhdXJhbnRzIGZyb20gaW5kZXhlZERCXHJcbiAgICBEQkhlbHBlci5vcGVuRGF0YWJhc2UoKS50aGVuKGZ1bmN0aW9uIChkYikge1xyXG4gICAgICBpZiAoIWRiKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9ICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZGIudHJhbnNhY3Rpb24oJ3Jlc3RhdXJhbnRzJywgJ3JlYWR3cml0ZScpXHJcbiAgICAgICAgICAgICAgICAgLm9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycpXHJcbiAgICAgICAgICAgICAgICAgLmdldEFsbCgpO1xyXG4gICAgICB9XHJcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN0YXVyYW50cykge1xyXG4gICAgICBpZiAocmVzdGF1cmFudHMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3RhdXJhbnRzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZldGNoKERCSGVscGVyLkRBVEFCQVNFX1VSTClcclxuICAgIC50aGVuKFxyXG4gICAgICBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdGZXRjaCBJc3N1ZSAtIFN0YXR1cyBDb2RlOiAnICsgcmVzcG9uc2Uuc3RhdHVzKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKGZ1bmN0aW9uIChyZXN0YXVyYW50cykge1xyXG5cclxuICAgICAgICAgIC8qIEFkZCByZXN0YXVyYW50cyB0byBpbmRleGVkREIgKi9cclxuICAgICAgICAgIERCSGVscGVyLm9wZW5EYXRhYmFzZSgpLnRoZW4oZnVuY3Rpb24gKGRiKSB7XHJcbiAgICAgICAgICAgIGlmICghZGIpIHtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgbGV0IHN0b3JlID0gZGIudHJhbnNhY3Rpb24oJ3Jlc3RhdXJhbnRzJywgJ3JlYWR3cml0ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XHJcbiAgICAgICAgICAgICAgcmVzdGF1cmFudHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdGF1cmFudCkge1xyXG4gICAgICAgICAgICAgICAgc3RvcmUucHV0KHJlc3RhdXJhbnQpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50cyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIClcclxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdGZXRjaCBFcnJvcjogJywgZXJyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYSByZXN0YXVyYW50IGJ5IGl0cyBJRC5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlJZChpZCwgY2FsbGJhY2spIHtcclxuICAgIC8vIGZldGNoIGFsbCByZXN0YXVyYW50cyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgcmVzdGF1cmFudCA9IHJlc3RhdXJhbnRzLmZpbmQociA9PiByLmlkID09IGlkKTtcclxuICAgICAgICBpZiAocmVzdGF1cmFudCkgeyAvLyBHb3QgdGhlIHJlc3RhdXJhbnRcclxuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3RhdXJhbnQpO1xyXG4gICAgICAgIH0gZWxzZSB7IC8vIFJlc3RhdXJhbnQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGRhdGFiYXNlXHJcbiAgICAgICAgICBjYWxsYmFjaygnUmVzdGF1cmFudCBkb2VzIG5vdCBleGlzdCcsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgdHlwZSB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lKGN1aXNpbmUsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHMgIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gY3Vpc2luZSB0eXBlXHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHJlc3RhdXJhbnRzLmZpbHRlcihyID0+IHIuY3Vpc2luZV90eXBlID09IGN1aXNpbmUpO1xyXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIHJlc3RhdXJhbnRzIGJ5IGEgbmVpZ2hib3Job29kIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeU5laWdoYm9yaG9vZChuZWlnaGJvcmhvb2QsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gRmlsdGVyIHJlc3RhdXJhbnRzIHRvIGhhdmUgb25seSBnaXZlbiBuZWlnaGJvcmhvb2RcclxuICAgICAgICBjb25zdCByZXN1bHRzID0gcmVzdGF1cmFudHMuZmlsdGVyKHIgPT4gci5uZWlnaGJvcmhvb2QgPT0gbmVpZ2hib3Job29kKTtcclxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgYW5kIGEgbmVpZ2hib3Job29kIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QoY3Vpc2luZSwgbmVpZ2hib3Job29kLCBjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCByZXN1bHRzID0gcmVzdGF1cmFudHM7XHJcbiAgICAgICAgaWYgKGN1aXNpbmUgIT0gJ2FsbCcpIHsgLy8gZmlsdGVyIGJ5IGN1aXNpbmVcclxuICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIuY3Vpc2luZV90eXBlID09IGN1aXNpbmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5laWdoYm9yaG9vZCAhPSAnYWxsJykgeyAvLyBmaWx0ZXIgYnkgbmVpZ2hib3Job29kXHJcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIociA9PiByLm5laWdoYm9yaG9vZCA9PSBuZWlnaGJvcmhvb2QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYWxsIG5laWdoYm9yaG9vZHMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoTmVpZ2hib3Job29kcyhjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEdldCBhbGwgbmVpZ2hib3Job29kcyBmcm9tIGFsbCByZXN0YXVyYW50c1xyXG4gICAgICAgIGNvbnN0IG5laWdoYm9yaG9vZHMgPSByZXN0YXVyYW50cy5tYXAoKHYsIGkpID0+IHJlc3RhdXJhbnRzW2ldLm5laWdoYm9yaG9vZCk7XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gbmVpZ2hib3Job29kc1xyXG4gICAgICAgIGNvbnN0IHVuaXF1ZU5laWdoYm9yaG9vZHMgPSBuZWlnaGJvcmhvb2RzLmZpbHRlcigodiwgaSkgPT4gbmVpZ2hib3Job29kcy5pbmRleE9mKHYpID09IGkpO1xyXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHVuaXF1ZU5laWdoYm9yaG9vZHMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGFsbCBjdWlzaW5lcyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hDdWlzaW5lcyhjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEdldCBhbGwgY3Vpc2luZXMgZnJvbSBhbGwgcmVzdGF1cmFudHNcclxuICAgICAgICBjb25zdCBjdWlzaW5lcyA9IHJlc3RhdXJhbnRzLm1hcCgodiwgaSkgPT4gcmVzdGF1cmFudHNbaV0uY3Vpc2luZV90eXBlKTtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXMgZnJvbSBjdWlzaW5lc1xyXG4gICAgICAgIGNvbnN0IHVuaXF1ZUN1aXNpbmVzID0gY3Vpc2luZXMuZmlsdGVyKCh2LCBpKSA9PiBjdWlzaW5lcy5pbmRleE9mKHYpID09IGkpO1xyXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHVuaXF1ZUN1aXNpbmVzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXN0YXVyYW50IHBhZ2UgVVJMLlxyXG4gICAqL1xyXG4gIHN0YXRpYyB1cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpIHtcclxuICAgIHJldHVybiAoYC4vcmVzdGF1cmFudC5odG1sP2lkPSR7cmVzdGF1cmFudC5pZH1gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc3RhdXJhbnQgaW1hZ2UgVVJMLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBpbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xyXG4gICAgcmV0dXJuIChgL2ltZy8ke3Jlc3RhdXJhbnQucGhvdG9ncmFwaH0ud2VicGApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAqIFJlc3RhdXJhbnQgcmVzcG9uc2l2ZSBpbWFnZXMgc291cmNlIHNldC5cclxuICovXHJcbnN0YXRpYyBpbWFnZVJlc3BvbnNpdmVVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpIHtcclxuICAgIGNvbnN0IHNjYWxlMXggPSAnMzIwJztcclxuICAgIGNvbnN0IHNjYWxlMV81eCA9ICc0ODAnO1xyXG4gICAgY29uc3Qgc2NhbGUyeCA9ICc2NDAnO1xyXG4gICAgY29uc3Qgc2NhbGUzeCA9ICc4MDAnO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgYC9pbWdfcmVzcG9uc2l2ZS8ke3Jlc3RhdXJhbnQuaWR9LSR7c2NhbGUxeH0ud2VicCAke3NjYWxlMXh9dyxcclxuICAgICAgICAvaW1nX3Jlc3BvbnNpdmUvJHtyZXN0YXVyYW50LmlkfS0ke3NjYWxlMV81eH0ud2VicCAke3NjYWxlMV81eH13LFxyXG4gICAgICAgIC9pbWdfcmVzcG9uc2l2ZS8ke3Jlc3RhdXJhbnQuaWR9LSR7c2NhbGUyeH0ud2VicCAke3NjYWxlMnh9dyxcclxuICAgICAgICAvaW1nX3Jlc3BvbnNpdmUvJHtyZXN0YXVyYW50LmlkfS0ke3NjYWxlM3h9LndlYnAgJHtzY2FsZTN4fXdgKTtcclxufVxyXG5cclxuICAvKipcclxuICAgKiBNYXAgbWFya2VyIGZvciBhIHJlc3RhdXJhbnQuXHJcbiAgICovXHJcbiAgc3RhdGljIG1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgbWFwKSB7XHJcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcclxuICAgICAgcG9zaXRpb246IHJlc3RhdXJhbnQubGF0bG5nLFxyXG4gICAgICB0aXRsZTogcmVzdGF1cmFudC5uYW1lLFxyXG4gICAgICB1cmw6IERCSGVscGVyLnVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCksXHJcbiAgICAgIG1hcDogbWFwLFxyXG4gICAgICBhbmltYXRpb246IGdvb2dsZS5tYXBzLkFuaW1hdGlvbi5EUk9QLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbWFya2VyO1xyXG4gIH1cclxuXHJcbn1cclxuIiwibGV0IHJlc3RhdXJhbnQ7XHJcbnZhciBtYXA7XHJcblxyXG5cclxuLypcclxuU2V0dGluZyBwaG90b2dyYXBocyBhbHRzKi9cclxuXHJcbmNvbnN0IHBob3RvZ3JhcGhBbHRzID0ge1xyXG5cdDE6IFwiU2VyZXZhbCBncm91cHMgb2YgcGVvcGxlIGhhdmluZyBxdWFsaXR5IHRpbWUgYXQgYSByZXN0YXVyYW50LlwiLFxyXG5cdDI6IFwiQSBsb3ZlbHkgbWFyZ2VyaXR0YSBwaXp6YVwiLFxyXG5cdDM6IFwiQW4gZW1wdHkgcmVzdGF1cmFudCBzZXR0aW5nIHdoaWNoIGhhcyBoZWF0ZXJzXCIsXHJcblx0NDogXCJBIGNvcm5lciBzaG90IG9mIHRoZSBvdXRzaWRlIG9mIHRoZSByZXN0YXVyYXQuXCIsXHJcblx0NTogXCJBIGNyb3dkZWQgcmVzdGF1cmFudCBhbmQgc3RhZmYgc2VydmluZyBmb29kIGZyb20gYmVoaW5kIHRoZSBiYXIuXCIsXHJcblx0NjogXCJSZXN0YXVyYW50IHdpdGggd29vZGVuIHRhYmxlcywgY2hhcmlzLCBhbmQgYSBVUyBmbGFnIGFzIGEgd2FsbCBkZWNvcmF0aW9uXCIsXHJcblx0NzogXCJhIGRvZyB3YXRjaGluZyBmcm9tIHRoZSBvdXRzaWRlIG9mIGEgY3Jvd2RlZCBidXJnZXIgc2hvcCwgYWNjb21wYW5pZWQgYnkgdHdvIG1lbi5cIixcclxuXHQ4OiBcIkNsb3NlIHVwIG9mIHRoZSBkdXRjaCByZXN0YXVyYW50IGxvZ28gYmVzaWRlIGEgZmxvd2VyaW5nIHRyZWVcIixcclxuXHQ5OiBcIkJsYWNrIGFuZCB3aGl0ZSBwaWN0dXJlIG9mIHBlb3BsZSBlYXRpbmcgYXQgYW4gYXNpYW4gcmVzdGF1cmF0LlwiLFxyXG5cdDEwOiBcIkVtcHR5IHJlc3RhdXJhbnQncyB3aGl0ZSBjaGFpcnMsIHdhbGxzIGFuZCBjZWlsaW5ncy5cIlxyXG59O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBHb29nbGUgbWFwLCBjYWxsZWQgZnJvbSBIVE1MLlxyXG4gKi9cclxud2luZG93LmluaXRNYXAgPSAoKSA9PiB7XHJcbiAgZmV0Y2hSZXN0YXVyYW50RnJvbVVSTCgoZXJyb3IsIHJlc3RhdXJhbnQpID0+IHtcclxuICAgIGlmIChlcnJvcikgeyAvLyBHb3QgYW4gZXJyb3IhXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2VsZi5tYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKSwge1xyXG4gICAgICAgIHpvb206IDE2LFxyXG4gICAgICAgIGNlbnRlcjogcmVzdGF1cmFudC5sYXRsbmcsXHJcbiAgICAgICAgc2Nyb2xsd2hlZWw6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICBmaWxsQnJlYWRjcnVtYigpO1xyXG4gICAgICBEQkhlbHBlci5tYXBNYXJrZXJGb3JSZXN0YXVyYW50KHNlbGYucmVzdGF1cmFudCwgc2VsZi5tYXApO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuU2hvdyBtYXAgYnV0dG9uXHJcbiovXHJcbmNhbGxNYXAgPVxyXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwVG9nZ2xlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xyXG4gIGlmICgoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1jb250YWluZXInKS5zdHlsZS5kaXNwbGF5KSA9PT0gJ2Jsb2NrJykge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1jb250YWluZXInKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgd2luZG93LmluaXRNYXAoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1jb250YWluZXInKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICB9XHJcbn0pO1xyXG4vKipcclxuICogR2V0IGN1cnJlbnQgcmVzdGF1cmFudCBmcm9tIHBhZ2UgVVJMLlxyXG4gKi9cclxuZmV0Y2hSZXN0YXVyYW50RnJvbVVSTCA9IChjYWxsYmFjaykgPT4ge1xyXG4gIGlmIChzZWxmLnJlc3RhdXJhbnQpIHsgLy8gcmVzdGF1cmFudCBhbHJlYWR5IGZldGNoZWQhXHJcbiAgICBjYWxsYmFjayhudWxsLCBzZWxmLnJlc3RhdXJhbnQpXHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNvbnN0IGlkID0gZ2V0UGFyYW1ldGVyQnlOYW1lKCdpZCcpO1xyXG4gIGlmICghaWQpIHsgLy8gbm8gaWQgZm91bmQgaW4gVVJMXHJcbiAgICBlcnJvciA9ICdObyByZXN0YXVyYW50IGlkIGluIFVSTCdcclxuICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICB9IGVsc2Uge1xyXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50QnlJZChpZCwgKGVycm9yLCByZXN0YXVyYW50KSA9PiB7XHJcbiAgICAgIHNlbGYucmVzdGF1cmFudCA9IHJlc3RhdXJhbnQ7XHJcbiAgICAgIGlmICghcmVzdGF1cmFudCkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBmaWxsUmVzdGF1cmFudEhUTUwoKTtcclxuICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdGF1cmFudClcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSByZXN0YXVyYW50IEhUTUwgYW5kIGFkZCBpdCB0byB0aGUgd2VicGFnZVxyXG4gKi9cclxuZmlsbFJlc3RhdXJhbnRIVE1MID0gKHJlc3RhdXJhbnQgPSBzZWxmLnJlc3RhdXJhbnQpID0+IHtcclxuICBjb25zdCBuYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtbmFtZScpO1xyXG4gIG5hbWUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xyXG5cclxuICBjb25zdCBhZGRyZXNzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtYWRkcmVzcycpO1xyXG4gIGFkZHJlc3MuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5hZGRyZXNzO1xyXG5cclxuICBjb25zdCBpbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50LWltZycpO1xyXG4gIGltYWdlLmNsYXNzTmFtZSA9ICdyZXN0YXVyYW50LWltZydcclxuICBpbWFnZS5zcmMgPSBEQkhlbHBlci5pbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCk7XHJcblx0aW1hZ2Uuc3Jjc2V0ID0gREJIZWxwZXIuaW1hZ2VSZXNwb25zaXZlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcclxuICBpbWFnZS5hbHQgPSBwaG90b2dyYXBoQWx0c1tyZXN0YXVyYW50LmlkXTtcclxuXHJcbiAgY29uc3QgY3Vpc2luZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50LWN1aXNpbmUnKTtcclxuICBjdWlzaW5lLmlubmVySFRNTCA9IHJlc3RhdXJhbnQuY3Vpc2luZV90eXBlO1xyXG5cclxuICAvLyBmaWxsIG9wZXJhdGluZyBob3Vyc1xyXG4gIGlmIChyZXN0YXVyYW50Lm9wZXJhdGluZ19ob3Vycykge1xyXG4gICAgZmlsbFJlc3RhdXJhbnRIb3Vyc0hUTUwoKTtcclxuICB9XHJcbiAgLy8gZmlsbCByZXZpZXdzXHJcbiAgZmlsbFJldmlld3NIVE1MKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgcmVzdGF1cmFudCBvcGVyYXRpbmcgaG91cnMgSFRNTCB0YWJsZSBhbmQgYWRkIGl0IHRvIHRoZSB3ZWJwYWdlLlxyXG4gKi9cclxuZmlsbFJlc3RhdXJhbnRIb3Vyc0hUTUwgPSAob3BlcmF0aW5nSG91cnMgPSBzZWxmLnJlc3RhdXJhbnQub3BlcmF0aW5nX2hvdXJzKSA9PiB7XHJcbiAgY29uc3QgaG91cnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudC1ob3VycycpO1xyXG5cdGhvdXJzLmlubmVySFRNTCA9ICcnO1xyXG4gIGZvciAobGV0IGtleSBpbiBvcGVyYXRpbmdIb3Vycykge1xyXG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcclxuXHJcbiAgICBjb25zdCBkYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG4gICAgZGF5LmlubmVySFRNTCA9IGtleTtcclxuICAgIHJvdy5hcHBlbmRDaGlsZChkYXkpO1xyXG5cclxuICAgIGNvbnN0IHRpbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG4gICAgdGltZS5pbm5lckhUTUwgPSBvcGVyYXRpbmdIb3Vyc1trZXldO1xyXG4gICAgcm93LmFwcGVuZENoaWxkKHRpbWUpO1xyXG5cclxuICAgIGhvdXJzLmFwcGVuZENoaWxkKHJvdyk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGFsbCByZXZpZXdzIEhUTUwgYW5kIGFkZCB0aGVtIHRvIHRoZSB3ZWJwYWdlLlxyXG4gKi9cclxuZmlsbFJldmlld3NIVE1MID0gKHJldmlld3MgPSBzZWxmLnJlc3RhdXJhbnQucmV2aWV3cykgPT4ge1xyXG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXZpZXdzLWNvbnRhaW5lcicpO1xyXG5cdGNvbnRhaW5lci5pbm5lckhUTUwgPSAnPHVsIGlkPVwicmV2aWV3cy1saXN0XCI+PC91bD4nO1xyXG5cdGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcclxuICB0aXRsZS5pbm5lckhUTUwgPSAnUmV2aWV3cyc7XHJcbiAgdGl0bGUudGFiSW5kZXggPSAnMCc7XHJcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlKTtcclxuXHJcbiAgaWYgKCFyZXZpZXdzKSB7XHJcbiAgICBjb25zdCBub1Jldmlld3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICBub1Jldmlld3MuaW5uZXJIVE1MID0gJ05vIHJldmlld3MgeWV0ISc7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobm9SZXZpZXdzKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgY29uc3QgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmV2aWV3cy1saXN0Jyk7XHJcbiAgcmV2aWV3cy5mb3JFYWNoKHJldmlldyA9PiB7XHJcbiAgICB1bC5hcHBlbmRDaGlsZChjcmVhdGVSZXZpZXdIVE1MKHJldmlldykpO1xyXG4gIH0pO1xyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh1bCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgcmV2aWV3IEhUTUwgYW5kIGFkZCBpdCB0byB0aGUgd2VicGFnZS5cclxuICovXHJcbmNyZWF0ZVJldmlld0hUTUwgPSAocmV2aWV3KSA9PiB7XHJcbiAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gIGxpLnRhYkluZGV4ID0gJzAnO1xyXG5cclxuXHJcbiAgY29uc3QgZGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2g1Jyk7XHJcbiAgZGF0ZS5pbm5lckhUTUwgPSByZXZpZXcuZGF0ZTtcclxuICBsaS5hcHBlbmRDaGlsZChkYXRlKTtcclxuXHJcbiAgY29uc3QgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XHJcbiAgbmFtZS5pbm5lckhUTUwgPSByZXZpZXcubmFtZTtcclxuICBsaS5hcHBlbmRDaGlsZChuYW1lKTtcclxuXHJcbiAgY29uc3QgcmF0aW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xyXG4gIHJhdGluZy5pbm5lckhUTUwgPSBgUmF0aW5nOiAke3Jldmlldy5yYXRpbmd9YDtcclxuICBsaS5hcHBlbmRDaGlsZChyYXRpbmcpO1xyXG5cclxuICBjb25zdCBjb21tZW50cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICBjb21tZW50cy5pbm5lckhUTUwgPSByZXZpZXcuY29tbWVudHM7XHJcbiAgbGkuYXBwZW5kQ2hpbGQoY29tbWVudHMpO1xyXG5cclxuICByZXR1cm4gbGk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgcmVzdGF1cmFudCBuYW1lIHRvIHRoZSBicmVhZGNydW1iIG5hdmlnYXRpb24gbWVudVxyXG4gKi9cclxuZmlsbEJyZWFkY3J1bWIgPSAocmVzdGF1cmFudD1zZWxmLnJlc3RhdXJhbnQpID0+IHtcclxuICBjb25zdCBicmVhZGNydW1iID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JyZWFkY3J1bWInKTtcclxuXHRjb25zdCBicmVhZGNydW1iRWxlbWVudHMgPSBicmVhZGNydW1iLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XHJcblx0Zm9yIChlbGVtZW50IG9mIGJyZWFkY3J1bWJFbGVtZW50cykge1xyXG5cdGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKTtcclxufVxyXG5cdGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuXHRsaS5zZXRBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcsICdwYWdlJyk7XHJcblx0aWYgKGJyZWFkY3J1bWIuY2hpbGRFbGVtZW50Q291bnQgPT09IDIpIHJldHVybjtcclxuICBsaS5pbm5lckhUTUwgPSByZXN0YXVyYW50Lm5hbWU7XHJcbiAgYnJlYWRjcnVtYi5hcHBlbmRDaGlsZChsaSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgYSBwYXJhbWV0ZXIgYnkgbmFtZSBmcm9tIHBhZ2UgVVJMLlxyXG4gKi9cclxuZ2V0UGFyYW1ldGVyQnlOYW1lID0gKG5hbWUsIHVybCkgPT4ge1xyXG4gIGlmICghdXJsKVxyXG4gICAgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW1xcXV0vZywgJ1xcXFwkJicpO1xyXG4gIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChgWz8mXSR7bmFtZX0oPShbXiYjXSopfCZ8I3wkKWApLFxyXG4gICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcclxuICBpZiAoIXJlc3VsdHMpXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICBpZiAoIXJlc3VsdHNbMl0pXHJcbiAgICByZXR1cm4gJyc7XHJcbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcclxufVxyXG5cclxuaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyKSB7XHJcbiAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoJ3N3LmpzJylcclxuICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdQYXNzZWQgVGVzdCcpKVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFJlZ2lzdGVyIGEgc2VydmljZVdvcmtlclxyXG4gKi9cclxucmVnaXN0ZXJTZXJ2aWNlV29ya2VyID0gKCkgPT4ge1xyXG4gICAgLy9jaGVjayBpZiBzZXJ2aWNlV29ya2VyIGlzIHN1cHBvcnRlZCwgb3RoZXJ3aXNlIHJldHVyblxyXG4gICAgaWYgKCFuYXZpZ2F0b3Iuc2VydmljZVdvcmtlcikgcmV0dXJuO1xyXG5cclxuICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCcvc3cuanMnKS5jYXRjaChmdW5jdGlvbigpe1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlNvbWV0aGluZyB3ZW50IHdyb25nLiBTZXJ2aWNlV29ya2VyIG5vdCByZWdpc3RlcmVkXCIpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmVnaXN0ZXJTZXJ2aWNlV29ya2VyKCk7XHJcbiJdfQ==
